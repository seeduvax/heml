{document
    {section %a1=titre de la section
        {section %a1=titre de la sous section
            pargraphe 1
{# commentaire #}
            pararaphe 2
                -  enum11                 {kw
toto                }
 is in the kitchen
                -                  {p
enum12                     {b
I'm bold                    }
 !                }

                    -                      {kw
important                    }
 sublist1 (cf.                     {xref
nothing                    }
)
                    -  sublist2
                test
            {p
                {kw
One                }
 text after list            }
            tests
            {section %a1=titre de la sous sous section â¬â¬
                paragraphe 3
                    -  enumeration 1
                    -  enumeration 2
                        -  enumeration 2.1
                        -  enumeration 2.2
                            - enumeration 2.2.1
                            - enum 2.2.2
                            paragraphe indentÃ©
                            -  enum 2.2.3
                    -  enumeration 3
                    paragraphe 4 : ce paragraphe contient                     {b
un tag inline                    }
 pour                     {a %href=http://url
voir                    }
...
                    plop
            }
        }
{#lua generated content#}
        {luaelem
lua inner text        }
        optional content
    }
    {section %a1=derniere section
        dernier paragraphe
        By default, ABS manages two build mode:
            -  debug: default mode for the everyday developer work.
            -  release: default mode for the distribution package.
        Each sub-makefile handling a specific module type shall adapt its part of the build process according the mode. The debug mode shall provide debug information and disable any optimization is the final targets, while the release mode shall remove the debug information and can apply some optimizations.
    }
    {bidule %a1=blip %tag0=valeur tag 0 %a2=blop %tag1=valeur tag 1 %tagZ=Machin chouette %tag2=valeur tag 2
        {machin %attr=tralala
        }
            %tagHello=hello
        Reprise de texte eventuellement structurÃ©
            toto
        {machin %attr=tralala
        }
        titi
        {machin %attr=tralala
            {chouette %a1=plip
            }
        }
            -  bla
            -  bla
    }
    {%tableRowName%field1%field2%field3
un	%un1	%un2
deux	%deux1	%	%deux3
trois	%trois1	%trois2	%trois3
    %}
    plop
    {elem
        {%tableRowName%field1%field2%field3
un	%un1	%un2
deux	%	%deux2	%deux3
trois	%trois1	%trois2	%trois3
quatre	%quatre1
        %}
        test include 1
        test include 1
        test include 2
        test include 2
        test include 1
        skdjhskdjhfskjdf
        lsdkfjsdlkf
        {%tr%td
a	%b	%c	%d	%e
1	%2	%3	%4
        %}
        {%tr%td
1	%2	%3	%4	%5

	%	%III	%	%V
a	%b	%c	%d	%e	%f
        {plop
            ppppp
            ppppp
{!System.out.println("-------------------------------");
        Parser p=getParser("testHEML-Xsl.txt");
        EH eh=new EH();
        p.setXslPath("test/test.xsl");
        p.setErrHandler(eh);
        assertNull(checkParse(p));
        assertEquals(2,eh._count);
System.out.println("-------------------------------");
        p=getParser("testHEML-Xsl.txt");
        eh=new EH();
        p.setXslPath("test/test.xsl");
        p.setErrHandler(eh);
        p.addSearchPath("test/plop");
        assertNull(checkParse(p));
System.out.println("-------------------------------");
        assertEquals(1,eh._count);!}
            ppp
{!command output
!}
        }
            -  sldkfjs
    }
    {fig %src=toto/titi.png
    }
}
